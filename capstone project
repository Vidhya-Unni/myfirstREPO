import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression

# Load the CSV data into data frames
votes_df = pd.read_csv('votes.csv')
gross_df = pd.read_csv('gross_collection.csv')

# Split the data into features (X) and target variables (y)
X_votes = votes_df.drop(['Movie Name', 'votes'], axis=1)
y_votes = votes_df['votes']

X_gross = gross_df.drop(['Movie Name', 'Gross collection'], axis=1)
y_gross = gross_df['Gross collection']

# Split the data into train and test sets
X_train_votes, X_test_votes, y_train_votes, y_test_votes = train_test_split(X_votes, y_votes, test_size=0.2, random_state=42)
X_train_gross, X_test_gross, y_train_gross, y_test_gross = train_test_split(X_gross, y_gross, test_size=0.2, random_state=42)

# Create a pipeline for preprocessing and modeling
pipeline_votes = Pipeline([
    ('scaler', StandardScaler()),
    ('model', RandomForestRegressor(random_state=42))
])

pipeline_gross = Pipeline([
    ('scaler', StandardScaler()),
    ('model', LinearRegression())
])

# Define the hyperparameters to tune
param_grid_votes = {
    'model__n_estimators': [100, 200, 300],
    'model__max_depth': [None, 5, 10],
    'model__min_samples_split': [2, 5, 10]
}

param_grid_gross = {
    'model__normalize': [True, False]
}

# Perform GridSearchCV for hyperparameter tuning
grid_search_votes = GridSearchCV(pipeline_votes, param_grid=param_grid_votes, cv=5, scoring='neg_mean_squared_error')
grid_search_gross = GridSearchCV(pipeline_gross, param_grid=param_grid_gross, cv=5, scoring='neg_mean_squared_error')

# Fit the models and find the best hyperparameters
grid_search_votes.fit(X_train_votes, y_train_votes)
grid_search_gross.fit(X_train_gross, y_train_gross)

# Predict on the test set
y_pred_votes = grid_search_votes.predict(X_test_votes)
y_pred_gross = grid_search_gross.predict(X_test_gross)

# Evaluate the models
mse_votes = mean_squared_error(y_test_votes, y_pred_votes)
mse_gross = mean_squared_error(y_test_gross, y_pred_gross)
r2_votes = r2_score(y_test_votes, y_pred_votes)
r2_gross = r2_score(y_test_gross, y_pred_gross)

# Print the evaluation metrics
print("Votes Prediction - Mean Squared Error:", mse_votes)
print("Votes Prediction - R2 Score:", r2_votes)
print("Gross Collection Prediction - Mean Squared Error:", mse_gross)
print("Gross Collection Prediction - R2 Score:", r2_gross)

# Save the best models
best_model_votes = grid_search_votes.best_estimator_
best_model_gross = grid_search_gross.best_estimator_

# Save the models for future use
from joblib import dump
dump(best_model_votes, 'votes_prediction_model.joblib')
dump(best_model_gross, 'gross_collection_prediction_model.joblib')
